const admin = require("firebase-admin");
const fs = require('fs');
const { program } = require('commander');

// Setup command line interface
program
  .name('flutter-firestore-cicd-demo')
  .description('CLI to help with CI/CD for Flutter + Firestore');

program.command('prep-test-env')
  .description('Prepares the Firebase test project environment including Firestore database, storage, and authentication.')
  .action(async (arg1, options) => {
    await prepTestEnv();
  });

  // Get Firestore credentials either from local file (local development) or env var (CI/CD environment)
let devAdminKeyTestFilePath = './firebase_admin_key_test.json';
let adminKeyTest;

if(fs.existsSync(devAdminKeyTestFilePath)){
  adminKeyTest = fs.readFileSync(devAdminKeyTestFilePath, {encoding: 'utf8'});
}else{
  adminKeyTest = process.env.FIREBASE_ADMIN_KEY_TEST;
}

if(!adminKeyTest){
  throw new Error('No FIREBASE_ADMIN_KEY_TEST env var supplied.');
}

let serviceAccount;
try{
  serviceAccount = JSON.parse(adminKeyTest);
}catch(error){
  throw new Error('Failed to parse FIREBASE_ADMIN_KEY_TEST as JSON. Generate a valid service account key JSON object from your Firebase project settings.');
}

// Connect to Firebase app
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});
const firestore = admin.firestore();

// Prepare Firebase test project
const prepTestEnv = async () => {
  // Clear database
  const collectionRef = firestore.collection('posts');
  await firestore.recursiveDelete(collectionRef);

  // Populate database
  firestore.collection(`posts`).add({
    title: 'The First Post',
    body: `This post was auto-generated by the CI/CD script. Be careful changing this content as it could break some tests :-|`,
  });
  firestore.collection(`posts`).add({
    title: 'Another Great Post',
    body: `We always need more than one post to test with because plurality failures are real!`,
  });
}

// Run CLI
program.parse();